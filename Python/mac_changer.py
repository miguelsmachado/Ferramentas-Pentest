import subprocess, re, optparse, time

def get_args():
    parser = optparse.OptionParser()

    parser.add_option("-i", "--interface", dest="interface", help="Name of the interface that you would like to change tha MAC Address")
    parser.add_option("-m", "--mac-address", dest="new_mac", help="New value for the MAC Address")

    options = parser.parse_args()[0]

    if options.interface and options.new_mac:
        return options
    else:
        if not options.interface:
            print("[-] Enter a valeu for the interface. Type --help for more informations")
        if not options.new_mac:
            print("[-] Enter a valeu for the new mac address. Type --help for more informations")


def change_mac(interface, new_mac):
    print("[+] Changing MAC Address...")
    # subprocess.call(["ifconfig", interface, "down"])
    # subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    # subprocess.call(["ifconfig", interface, "up"])
    time.sleep(3)


def get_current_mac(interface):
    ifconfig_res = subprocess.check_output(["ifconfig", interface])
    current_mac = re.search("(\w\w:){5}\w\w", ifconfig_res.decode())
    

    if current_mac:
        return current_mac[0]
    else:
        print("[-] This interface has no MAC Address")


def is_mac_new(current_mac, new_mac):
    if current_mac == new_mac:
        print("[-] Unable to change MAC Address")
    else:
        print("[+] MAC Address changed sucessfully")
        print(f"Your last MAC Address was {current_mac}")
        print(f"Your new MAC Address was {new_mac}")

options = get_args()

current_mac = get_current_mac(options.interface)

change_mac(options.interface, options.new_mac)

new_mac = get_current_mac(options.interface)

is_mac_new(current_mac, new_mac)
